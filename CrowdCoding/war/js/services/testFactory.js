
// create the test list
myApp.factory("TestList", ['$firebase','firebaseUrl','TestFactory', function($firebase, firebaseUrl, TestFactory) {
	var ref = new Firebase(firebaseUrl+'/artifacts/tests');
	return $firebase(ref, {arrayFactory: "TestFactory"}).$asArray();
}]);


myApp.factory("TestFactory",['$FirebaseArray', '$firebaseUtils', '$firebase', 'Test', 'firebaseUrl', function( $FirebaseArray, $firebaseUtils, $firebase, Test, firebaseUrl){

	var lastId = 0;
	var objectsList = {};
	var count = 0;

	return $FirebaseArray.$extendFactory({

		// override $$added method of AngularFire FirebaseArray factory
		$$added: function(snap, prevChild) {
			var i = this.$indexFor(snap.name());
			if( i === -1 ) {

				var rec = snap.val();
				if( !angular.isObject(rec) ) {
					rec = { $value: rec };
				}
				rec.$id = snap.name();
				rec.$priority = snap.getPriority();
				$firebaseUtils.applyDefaults(rec, this.$$defaults);

				this._process('child_added', rec, prevChild);

				// add the object to our list
				objectsList[ snap.name() ] = new Test( snap.val() ); 
				if( parseInt(snap.name()) > lastId) 
					lastId = parseInt(snap.name());

				count++;
			}
		},

		// override $$updated method of AngularFire FirebaseArray factory
		$$updated: function(snap) {
			var rec = this.$getRecord( snap.name() );
			if( angular.isObject(rec) ) {
				// apply changes to the record
				var changed = $firebaseUtils.updateRec(rec, snap);
				$firebaseUtils.applyDefaults(rec, this.$$defaults);
				if( changed ) {
					this._process('child_changed', rec);

					// UPDATE THE OBJECT IN OUR LIST
					objectsList[ snap.name() ].update( snap.val() ); 
				}
			}
		},

		// retrieve the test with id = testId
		get: function(testId){
			if( objectsList.hasOwnProperty(testId) ){
				return objectsList[testId];
			}
			return null;
		},

		// retrieve all the tests
		getAll: function(){
			return objectsList;
		},

		// retrieve all the tests belonging to 
		// the function funct
		getByFunction: function(funct){
			this.getByFunctionId(funct.id);
		},

		// retrieve all the tests belonging to 
		// the function with id = functionId
		getByFunctionId: function(functionId){
			var returnList = [];
			angular.forEach( objectsList, function( test, key){
				if( test.getFunctionId() == functionId )
					returnList.push(test);	
			});

			return returnList;
		},
		// retrieve all the tests belonging to 
		// the function with name = functionName
		getByFunctionName: function(functionName){
			var returnList = [];
			angular.forEach( objectsList, function( test, key){
				if( test.getFunctionName() == functionName )
					returnList.push(test);	
			});
			return returnList;
		},

		// search a test belonging for the function functionId
		// and inputsValue
		search: function(functionId,inputsValue){
			// if one of the parameters is undefined, return null 
			if(inputsValue == undefined || functionId == undefined) 
				return null;

			// filter objectsList
			// return null if not found
			var foundTest = null;
			var found     = false;
			angular.forEach( objectsList, function( test, key){
				if( !found && test.getFunctionId() == functionId &&  
					angular.toJson(test.getSimpleTest().inputs.toString()) == angular.toJson(inputsValue.toString()) ){
					found = true;
					foundTest = found;
				}
			});
			return foundTest;
		},

		// add a test to the factory
		// 1) search if already exists - there can't be two tests for the same function and with the same inputs
        // add to the list of FirebaseArray
		set: function(test){ 
			var rec = test.toJSON();
				console.log(rec);
			var ref = new Firebase(firebaseUrl+'/artifacts/tests/'+test.getId());
			ref.set(rec);
		},

		searchAndAdd: function(functionId,inputsValue,outputValue){
			var test = this.search(functionId,inputsValue);
			if( test == null ){
				console.log("TEST NOT FOUND");
				test = new Test();
				test.setId(lastId+1);
				test.setFunctionId(functionId);
				test.setSimpleTest(inputsValue,outputValue);
				test.setDescription("auto generated by the system");
				this.set(test);
			}
			else console.log("TEST FOUND");
			return test;
		},

		buildStubsByFunctionName: function(functionName){
			var tests = this.getByFunctionName(functionName);
			var stubs = {};

			angular.forEach(tests,function(test){
				if( test.hasSimpleTest() ){
					var inputsKey = {};
					angular.forEach(test.rec.simpleTestInputs, function(value,key){
						inputsKey[JSON.stringify(key)] = value;				
					});

					stubs[JSON.stringify(inputsKey)] = { 
						  inputs: test.rec.simpleTestInputs, 
					      output: JSON.parse(test.rec.simpleTestOutput)
					};
				}
			});

			return stubs;
		},
		getCount: function(){
			return count;
		}

	});
}]);

myApp.factory("Test", function ($FirebaseArray) {
	function Test(rec){
		if( rec == undefined )
			this.rec = {};
		else
			this.rec = rec;
	}

	Test.prototype = {
		getId: function(){
			return this.rec.id;
		},
		setId: function(id){
			this.rec.id  = id;
		},
		update: function(rec){
			this.rec = rec;
		},
		toJSON: function(){
			return this.rec;
		},
		getFunctionId: function(){
			return this.rec.functionID;
		},
		setFunctionId: function(functionId){
			this.rec.functionID = functionId;
		},
		getFunctionName: function(){
			return this.rec.functionName;
		},
		setFunctionId: function(functionName){
			this.rec.functionName = functionName;
		},
		getDescription: function(){
			return this.rec.description;
		},
		setDescription: function(description){
			this.rec.description = description;
		},
		getCode: function(){
			return this.rec.code;
		},
		setCode: function(code){
			this.rec.code = code;
		},
		hasSimpleTest: function(){
			if( this.rec.hasOwnProperty('simpleTestInputs') && this.rec.hasOwnProperty('simpleTestOutput') )
				return true;
			return false;
		},
		getSimpleTest: function(){
			if( !this.hasSimpleTest() )
				return {};

			return { 
				inputs: this.rec.simpleTestInputs, 
				output: this.rec.simpleTestOutput 
			}
		},
		setSimpleTest: function(inputs,output){
			this.rec.simpleTestInputs = inputs;
			this.rec.simpleTestOutput = output;
		},
		getCode: function(){
			return this.rec.code;
		}
	};

	return Test;
});

